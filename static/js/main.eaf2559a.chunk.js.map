{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","setRandomNum","_useState3","_useState4","list","setList","count","length","min","reduce","acc","cur","Math","value","max","avg","toFixed","median","floor","_jsxs","className","children","_jsx","onClick","newNum","round","random","newID","Date","now","concat","_toConsumableArray","id","sort","a","b","map","i","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"6LAKe,SAASA,IACtB,IAAAC,EAAkCC,mBAAS,GAAEC,EAAAC,YAAAH,EAAA,GAA3BI,GAAFF,EAAA,GAAcA,EAAA,IAC9BG,EAAwBJ,mBAAS,IAAGK,EAAAH,YAAAE,EAAA,GAA7BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAkBdG,EAAQF,EAAKG,OAEbC,EAAMJ,EAAKG,OACbH,EAAKK,QAAO,SAACC,EAAKC,GAAG,OAAKC,KAAKJ,IAAIE,EAAKC,EAAIE,MAAM,GAAE,KACpD,EAGEC,EAAMV,EAAKG,OACbH,EAAKK,QAAO,SAACC,EAAKC,GAAG,OAAKC,KAAKE,IAAIJ,EAAKC,EAAIE,MAAM,GAAE,GACpD,EAIEE,EAAMX,EAAKG,QACZH,EAAKK,QAAO,SAACC,EAAKC,GAAG,OAAKD,EAAMC,EAAIE,KAAK,GAAE,GAAKT,EAAKG,QAAQS,QAAQ,GACtE,EAEEC,EAASb,EAAKG,OAGhBH,EAAKG,OAAS,EACZH,EAAKQ,KAAKM,MAAMd,EAAKG,OAAS,IAAIM,OAGjCT,EAAKA,EAAKG,OAAS,EAAI,GAAGM,MAAQT,EAAKA,EAAKG,OAAS,GAAGM,OAAS,EACpE,EAEJ,OACEM,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAClBC,cAAA,MAAAD,SAAI,wBACJF,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,MAAAD,SAAI,eACJF,eAAA,KAAAE,SAAA,CACEC,cAAA,UAAAD,SAAQ,YACPf,EACDgB,cAAA,UAAAD,SAAQ,eACPb,EACDc,cAAA,UAAAD,SAAQ,eACPP,EACDQ,cAAA,UAAAD,SAAQ,eACPN,EACDO,cAAA,UAAAD,SAAQ,cACPJ,QAGLE,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UAAQC,QA9DO,WAEnB,IAAMC,EAASC,gBAAsB,IAAhBb,KAAKc,UAEpBC,EAAQC,KAAKC,MACnB5B,EAAauB,GAEbnB,EACE,GAAAyB,OAAAC,YAAI3B,GAAI,CAAE,CAAE4B,GAAIL,EAAOd,MAAOW,KAAUS,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAErB,MAAQsB,EAAEtB,KAAK,IAE5E,EAoDoCQ,SAAC,QAC/BC,cAAA,UAAQC,QAnDM,WAClBlB,EAAQ,GACV,EAiDmCgB,SAAC,aAEhCF,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACnBC,cAAA,MAAAD,SAAI,4BACHjB,EAAKgC,KAAI,SAACC,GAAC,OACVf,cAAA,KAAAD,SAAegB,EAAExB,OAATwB,EAAEL,GAAiB,SAKrC,CC7EA,IAAMM,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACHpB,cAACqB,aAAU,CAAAtB,SACTC,cAAC1B,EAAG,M","file":"static/js/main.eaf2559a.chunk.js","sourcesContent":["import RandomNumbers from \"./RandomNumbers\";\nimport { round } from \"lodash\";\nimport { useState } from \"react\";\nimport \"./styles.css\";\n\nexport default function App() {\n  const [randomNum, setRandomNum] = useState(0);\n  const [list, setList] = useState([]);\n\n  const handleButton = () => {\n    // random # between 0-100 (inclusive)\n    const newNum = round(Math.random() * 100);\n    // unique key\n    const newID = Date.now();\n    setRandomNum(newNum);\n    // sort low to high\n    setList(\n      [...list, { id: newID, value: newNum }].sort((a, b) => a.value - b.value)\n    );\n  };\n\n  const handleClear = () => {\n    setList([]);\n  };\n\n  const count = list.length;\n  // reduce to return min value\n  const min = list.length\n    ? list.reduce((acc, cur) => Math.min(acc, cur.value), 100)\n    : 0;\n\n  // reduce to return max value\n  const max = list.length\n    ? list.reduce((acc, cur) => Math.max(acc, cur.value), 0)\n    : 0;\n\n  // reduce to return sum\n  // divide sum by # of all elements\n  const avg = list.length\n    ? (list.reduce((acc, cur) => acc + cur.value, 0) / list.length).toFixed(2)\n    : 0;\n\n  const median = list.length\n    ? // if odd\n      // return middle element\n      list.length % 2\n      ? list[Math.floor(list.length / 2)].value\n      : // if even\n        // return average of two middle elements\n        (list[list.length / 2 - 1].value + list[list.length / 2].value) / 2\n    : 0;\n\n  return (\n    <div className=\"App\">\n      <h1>CIT 382 - Project 4</h1>\n      <div className=\"Stats\">\n        <h2>Statistics</h2>\n        <p>\n          <strong>Count: </strong>\n          {count}\n          <strong> Minimum: </strong>\n          {min}\n          <strong> Maximum: </strong>\n          {max}\n          <strong> Average: </strong>\n          {avg}\n          <strong> Median: </strong>\n          {median}\n        </p>\n      </div>\n      <div className=\"Buttons\">\n        <button onClick={handleButton}>Add</button>\n        <button onClick={handleClear}>Clear</button>\n      </div>\n      <div className=\"List\">\n        <h2>Random Number Generator</h2>\n        {list.map((i) => (\n          <p key={i.id}>{i.value}</p>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}